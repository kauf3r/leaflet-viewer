"use client";

import React, { useState } from 'react';
import { Save, Image as ImageIcon, Download, Settings } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { toast } from 'sonner';
import { useAppStore } from '@/lib/store';

interface ExportDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

interface ExportOptions {
  format: 'png' | 'jpeg';
  quality: number;
  width: number;
  height: number;
  dpi: number;
  includeWatermark: boolean;
}

export const ExportDialog: React.FC<ExportDialogProps> = ({
  open,
  onOpenChange,
}) => {
  const { layers } = useAppStore();
  const [isExporting, setIsExporting] = useState(false);
  const [exportOptions, setExportOptions] = useState<ExportOptions>({
    format: 'png',
    quality: 90,
    width: 1920,
    height: 1080,
    dpi: 150,
    includeWatermark: true,
  });

  const presetSizes = [
    { name: 'HD (1920×1080)', width: 1920, height: 1080 },
    { name: '4K (3840×2160)', width: 3840, height: 2160 },
    { name: 'A4 Print (3508×2480)', width: 3508, height: 2480 },
    { name: 'Letter Print (3300×2550)', width: 3300, height: 2550 },
    { name: 'Square (2048×2048)', width: 2048, height: 2048 },
    { name: 'Custom', width: exportOptions.width, height: exportOptions.height },
  ];

  const updateExportOptions = (updates: Partial<ExportOptions>) => {
    setExportOptions(prev => ({ ...prev, ...updates }));
  };

  const handlePresetChange = (preset: string) => {
    const selectedPreset = presetSizes.find(p => p.name === preset);
    if (selectedPreset && selectedPreset.name !== 'Custom') {
      updateExportOptions({
        width: selectedPreset.width,
        height: selectedPreset.height,
      });
    }
  };

  const captureMapView = async (): Promise<HTMLCanvasElement | null> => {
    // This function would need to access the Leaflet map instance
    // For now, we'll create a placeholder implementation
    return new Promise((resolve) => {
      // In a real implementation, you would:
      // 1. Get the Leaflet map container
      // 2. Use html2canvas or similar to capture the map
      // 3. Resize to the specified dimensions
      // 4. Add watermark if requested
      
      const canvas = document.createElement('canvas');
      canvas.width = exportOptions.width;
      canvas.height = exportOptions.height;
      
      const ctx = canvas.getContext('2d');
      if (ctx) {
        // Create a placeholder export image
        ctx.fillStyle = '#f0f9ff';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Add some sample content
        ctx.fillStyle = '#0369a1';
        ctx.font = '48px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('GeoTIFF Export', canvas.width / 2, canvas.height / 2 - 50);
        
        ctx.fillStyle = '#64748b';
        ctx.font = '24px Arial';
        ctx.fillText(`${layers.length} layers • ${exportOptions.width}×${exportOptions.height}`, 
                    canvas.width / 2, canvas.height / 2 + 20);
        
        if (exportOptions.includeWatermark) {
          ctx.fillStyle = '#94a3b8';
          ctx.font = '16px Arial';
          ctx.textAlign = 'right';
          ctx.fillText('Generated by GeoTIFF Viewer', canvas.width - 20, canvas.height - 20);
        }
      }
      
      setTimeout(() => resolve(canvas), 500); // Simulate processing time
    });
  };

  const exportImage = async () => {
    setIsExporting(true);
    
    try {
      const canvas = await captureMapView();
      if (!canvas) {
        throw new Error('Failed to capture map view');
      }

      // Convert to blob with specified format and quality
      const mimeType = exportOptions.format === 'png' ? 'image/png' : 'image/jpeg';
      const quality = exportOptions.format === 'jpeg' ? exportOptions.quality / 100 : undefined;
      
      canvas.toBlob((blob) => {
        if (blob) {
          // Create download link
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `geotiff-export-${new Date().toISOString().split('T')[0]}.${exportOptions.format}`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
          
          toast.success(`Image exported successfully as ${exportOptions.format.toUpperCase()}!`);
          onOpenChange(false);
        } else {
          throw new Error('Failed to create image blob');
        }
      }, mimeType, quality);

    } catch (error) {
      console.error('Export failed:', error);
      toast.error('Failed to export image');
    } finally {
      setIsExporting(false);
    }
  };

  const hasLayers = layers.length > 0;
  const fileSizeEstimate = Math.round((exportOptions.width * exportOptions.height * 3) / 1024 / 1024);

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-lg">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Save className="w-5 h-5" />
            Export Map
          </DialogTitle>
          <DialogDescription>
            {hasLayers 
              ? 'Export your current map view as an image file'
              : 'Add some layers to export a map view'
            }
          </DialogDescription>
        </DialogHeader>

        {hasLayers ? (
          <div className="space-y-6">
            {/* Format Selection */}
            <div className="space-y-2">
              <Label>Image Format</Label>
              <Select
                value={exportOptions.format}
                onValueChange={(value: 'png' | 'jpeg') => updateExportOptions({ format: value })}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="png">PNG (Lossless)</SelectItem>
                  <SelectItem value="jpeg">JPEG (Compressed)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Quality Slider (JPEG only) */}
            {exportOptions.format === 'jpeg' && (
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label>Quality</Label>
                  <span className="text-sm text-muted-foreground">
                    {exportOptions.quality}%
                  </span>
                </div>
                <Slider
                  value={[exportOptions.quality]}
                  onValueChange={([value]) => updateExportOptions({ quality: value })}
                  max={100}
                  min={10}
                  step={5}
                  className="w-full"
                />
              </div>
            )}

            {/* Size Presets */}
            <div className="space-y-2">
              <Label>Output Size</Label>
              <Select onValueChange={handlePresetChange}>
                <SelectTrigger>
                  <SelectValue placeholder="Choose preset size" />
                </SelectTrigger>
                <SelectContent>
                  {presetSizes.map((preset) => (
                    <SelectItem key={preset.name} value={preset.name}>
                      {preset.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Custom Dimensions */}
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label>Width (px)</Label>
                <input
                  type="number"
                  value={exportOptions.width}
                  onChange={(e) => updateExportOptions({ width: parseInt(e.target.value) || 1920 })}
                  className="w-full px-3 py-2 text-sm border rounded-md bg-background"
                  min="100"
                  max="7680"
                />
              </div>
              <div className="space-y-2">
                <Label>Height (px)</Label>
                <input
                  type="number"
                  value={exportOptions.height}
                  onChange={(e) => updateExportOptions({ height: parseInt(e.target.value) || 1080 })}
                  className="w-full px-3 py-2 text-sm border rounded-md bg-background"
                  min="100"
                  max="7680"
                />
              </div>
            </div>

            {/* Export Info */}
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm flex items-center gap-2">
                  <Settings className="w-4 h-4" />
                  Export Details
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-1 text-sm">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Resolution:</span>
                  <span>{exportOptions.width} × {exportOptions.height}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Format:</span>
                  <span>{exportOptions.format.toUpperCase()}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Est. Size:</span>
                  <span>~{fileSizeEstimate} MB</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Layers:</span>
                  <span>{layers.filter(l => l.visible).length} visible</span>
                </div>
              </CardContent>
            </Card>
          </div>
        ) : (
          <div className="text-center py-8">
            <ImageIcon className="w-12 h-12 mx-auto mb-4 text-muted-foreground" />
            <p className="text-sm text-muted-foreground">
              Upload GeoTIFF files to export map views
            </p>
          </div>
        )}

        <div className="flex justify-end gap-2 pt-4 border-t">
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          {hasLayers && (
            <Button 
              onClick={exportImage} 
              disabled={isExporting}
              className="flex items-center gap-2"
            >
              <Download className="w-4 h-4" />
              {isExporting ? 'Exporting...' : 'Export'}
            </Button>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};