# ===========================================
# GeoTIFF Processing Platform - CI/CD Pipeline
# ===========================================

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME_SERVER: ${{ github.repository }}/server
  IMAGE_NAME_VIEWER: ${{ github.repository }}/viewer

jobs:
  # ===========================================
  # Quality Assurance & Testing
  # ===========================================
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        package: [server, viewer]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: TypeScript Type Checking
        run: npm run type-check --workspace=packages/${{ matrix.package }}

      - name: ESLint Code Quality
        run: npm run lint --workspace=packages/${{ matrix.package }}

      - name: Prettier Code Formatting
        run: npm run format:check --workspace=packages/${{ matrix.package }}

  # ===========================================
  # Unit & Integration Testing
  # ===========================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality]

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_geotiff_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Server Unit Tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: test_user
          DB_PASSWORD: test_pass
          DB_DATABASE: test_geotiff_db
          JWT_SECRET: test-secret-key
          NODE_ENV: test
        run: npm run test --workspace=packages/server

      - name: Run Viewer Tests
        run: npm run test --workspace=packages/viewer

      - name: Test Coverage Report
        uses: codecov/codecov-action@v3
        if: github.event_name == 'push'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ===========================================
  # Build Applications
  # ===========================================
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality]

    strategy:
      matrix:
        package: [server, viewer]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build ${{ matrix.package }}
        run: npm run build --workspace=packages/${{ matrix.package }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.package }}
          path: packages/${{ matrix.package }}/dist/
          retention-days: 1

  # ===========================================
  # Security & Vulnerability Scanning
  # ===========================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'push'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: NPM Security Audit
        run: npm audit --audit-level=high

      - name: Dependency Vulnerability Scan
        uses: github/advisory-database-action@v1
        with:
          manifests: |
            package.json
            packages/server/package.json
            packages/viewer/package.json

  # ===========================================
  # Docker Image Building & Publishing
  # ===========================================
  docker:
    name: Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: 
          - name: server
            dockerfile: packages/server/Dockerfile
            context: .
          - name: viewer  
            dockerfile: packages/viewer/Dockerfile
            context: packages/viewer

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===========================================
  # End-to-End Testing (Production-like)
  # ===========================================
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Start Services with Docker Compose
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to be ready

      - name: Run E2E Tests
        run: npm run test:e2e --workspace=packages/viewer

      - name: Collect Docker Logs
        if: failure()
        run: |
          docker-compose logs api > api-logs.txt
          docker-compose logs frontend > frontend-logs.txt

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            packages/viewer/playwright-report/
            api-logs.txt
            frontend-logs.txt

      - name: Stop Services
        if: always()
        run: docker-compose down -v

  # ===========================================
  # Deployment to Staging/Production
  # ===========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy to Staging Environment
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "üì¶ Using images: ${{ env.REGISTRY }}/${{ github.repository }}/server:${{ github.sha }}"
          echo "üì¶ Using images: ${{ env.REGISTRY }}/${{ github.repository }}/viewer:${{ github.sha }}"
          # TODO: Implement actual staging deployment
          # This could be:
          # - AWS ECS task definition update
          # - Kubernetes deployment update  
          # - Docker Swarm stack deploy
          # - Terraform apply with new image tags

      - name: Run Staging Health Checks
        run: |
          echo "üè• Running staging health checks..."
          # TODO: Implement health checks against staging environment
          # curl -f https://staging-api.example.com/health || exit 1
          # curl -f https://staging.example.com || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy to Production Environment
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "üì¶ Using images: ${{ env.REGISTRY }}/${{ github.repository }}/server:${{ github.sha }}"
          echo "üì¶ Using images: ${{ env.REGISTRY }}/${{ github.repository }}/viewer:${{ github.sha }}"
          # TODO: Implement actual production deployment

      - name: Run Production Health Checks
        run: |
          echo "üè• Running production health checks..."
          # TODO: Implement health checks against production environment

      - name: Notify Deployment Success
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "üåç Frontend: https://geotiff-viewer.example.com"
          echo "üîå API: https://api-geotiff-viewer.example.com"

  # ===========================================
  # Notification & Cleanup
  # ===========================================
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
          else
            echo "‚ùå Deployment failed or was skipped"
          fi

      # TODO: Add Slack, Discord, or email notifications
      # - name: Slack Notification
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}